# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr:
- master
- releases/*

pool:
  vmImage: 'windows-latest'

steps:
- task: DotNetCoreCLI@2
  displayName: DotNetCore Restore
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
- task: DotNetCoreCLI@2
  displayName: DotNetCore Build
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: DotNetCore Run Tests
  inputs:
    command: 'test'
    projects: '**/*[Tt]est/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: DotNetCore Publish Project
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
- task: CopyFiles@2
  displayName: Copy Terraform Files to Artifacts Staging Directory
  inputs:
    SourceFolder: 'Terraform'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/Terraform'
- task: PublishBuildArtifacts@1
  displayName: Publish all Artifacts inside the Artifacts Staging Directory
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'